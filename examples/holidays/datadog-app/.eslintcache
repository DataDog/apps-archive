[{"/datadog-app/src/index.tsx":"1","/datadog-app/src/controller/index.ts":"2","/datadog-app/src/modal/index.tsx":"3","/datadog-app/src/widget_sunset/index.tsx":"4","/datadog-app/src/side-panel/index.tsx":"5","/datadog-app/src/widget/index.tsx":"6","/datadog-app/src/controller/modal.ts":"7","/datadog-app/src/controller/dashboard-cog-menu.ts":"8","/datadog-app/src/controller/widget-ctx-menu.ts":"9"},{"size":636,"mtime":1638473809000,"results":"10","hashOfConfig":"11"},{"size":624,"mtime":1638473809000,"results":"12","hashOfConfig":"11"},{"size":1349,"mtime":1638473809000,"results":"13","hashOfConfig":"11"},{"size":2632,"mtime":1639149978770,"results":"14","hashOfConfig":"11"},{"size":947,"mtime":1638473809000,"results":"15","hashOfConfig":"11"},{"size":3962,"mtime":1639150317721,"results":"16","hashOfConfig":"11"},{"size":642,"mtime":1638473809000,"results":"17","hashOfConfig":"11"},{"size":3132,"mtime":1638473809000,"results":"18","hashOfConfig":"11"},{"size":1208,"mtime":1638473809000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"naqj02",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/datadog-app/src/index.tsx",[],"/datadog-app/src/controller/index.ts",[],"/datadog-app/src/modal/index.tsx",[],"/datadog-app/src/widget_sunset/index.tsx",["40","41","42","43","44","45"],"import { init, EventType } from \"@datadog/ui-extensions-sdk\";\nimport \"./../index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./widget.css\";\nimport \"typeface-roboto\";\nimport { useEffect, useState } from \"react\";\n\nconst locations = [\"usa/new-york\", \"australia/lord-howe-island\", \"netherlands/amsterdam\", \"norway/oslo\", \"mozambique/maputo\"]\n\nconst epochToDate = (epoch) => {\n  const date = new Date(epoch);\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n\n  if (month < 10) {\n    month = '0' + month;\n  }\n  if (day < 10) {\n    day = '0' + day;\n  }\n\n  return `${date.getFullYear()}-${month}-${day}`;\n};\n\nconst client = init();\n\nfunction Widget() {\n  const [city, setCity] = useState(\"usa/new-york\");\n  const [tf, setTF] = useState(0);\n  const [sunset, setSunset] = useState('loading…');\n  const [broadcastClickCount, setBroadcastClickCount] = useState(0);\n\n  useEffect(() => {\n    client.getContext().then((c) => {\n      setCity(c.widget?.definition.options?.city);\n    });\n\n    client.events.on(\n      EventType.DASHBOARD_CUSTOM_WIDGET_OPTIONS_CHANGE,\n      ({ city }) => {\n        if (typeof city !== \"string\") {\n          return;\n        }\n        setCity(city);\n      }\n    );\n\n    client.events.on(\n      'dashboard_timeframe_change',\n      (newoptions) => {\n        setTF(newoptions.end);\n      }\n    );\n\n    client.getContext().then((c) => {\n      setTF(c?.dashboard?.timeframe?.end || (+new Date()));\n    });\n  }, []);\n\n  React.useEffect(() => {\n    if (false || tf === 0) { return; }\n    const params = `place=${city}&start=${epochToDate(tf)}`;\n    fetch(`http://localhost:5000/astro_sun?${params}`)\n      .then(resp => resp.json())\n      .then(data => {\n        console.log('response data', data);\n        const sunsetData = data.locations[0].astronomy.objects[0].days[0].events.filter(e => e.type === 'set')[0];\n        console.log('sunset', sunsetData);\n        const { hour, min, sec } = sunsetData;\n        const sunsetEmoji = hour < 18 ? '\\uD83D\\uDE16' : '\\uD83D\\uDE00';\n        const sunsetString = `${hour}:${min < 10 ? ('0' + min) : min} ${sunsetEmoji}`\n        setSunset(sunsetString);\n      });\n  }, [epochToDate(tf), city]);\n  const flexCenter = {\n    'display': 'flex',\n    'alignItems': 'center',\n    'justifyContent': 'center'\n  };\n  return (\n    <section style={{height: '100%', ...flexCenter}}>\n      {/*<p>{\"Sunset on \" + (new Date(tf)).toDateString()}</p>*/}\n      <h1>{sunset}</h1>\n    </section>\n  );\n};\n\nexport default function render() {\n  ReactDOM.render(\n    <React.StrictMode>{<Widget />}</React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n}\n","/datadog-app/src/side-panel/index.tsx",[],"/datadog-app/src/widget/index.tsx",["46","47","48","49"],"import { init, EventType } from \"@datadog/ui-extensions-sdk\";\nimport \"./../index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./widget.css\";\nimport \"typeface-roboto\";\nimport { useEffect, useState } from \"react\";\n\n\nconst client = init();\n\nfunction Widget() {\n  const [hemisphere, setHemisphere] = useState(\"New York\");\n  const [tf, setTF] = useState(0);\n  const [season, setSeason] = useState('loading…');\n  const [broadcastClickCount, setBroadcastClickCount] = useState(0);\n\n  useEffect(() => {\n    client.getContext().then((c) => {\n      setHemisphere(c.widget?.definition.options?.hemisphere);\n    });\n\n    client.events.on(\n      EventType.DASHBOARD_CUSTOM_WIDGET_OPTIONS_CHANGE,\n      ({ hemisphere }) => {\n        if (typeof hemisphere !== \"string\") {\n          return;\n        }\n        setHemisphere(hemisphere);\n      }\n    );\n\n    client.events.on(\n      'dashboard_timeframe_change',\n      (newoptions) => {\n        setTF(newoptions.end);\n      }\n    );\n\n      // client.events.onCustom(\"modal_button_click\", setBroadcastClickCount);\n    client.getContext().then((c) => {\n      setTF(c?.dashboard?.timeframe?.end || (+new Date()));\n    });\n  }, []);\n\n  // const urlidToSeason = new Map([['seasons/vernal-equinox', '']])\n\n  React.useEffect(() => {\n    if (false || tf === 0) { return; }\n    const year = new Date(tf).getFullYear();\n    const params = `country=us&year=${year}`;\n    fetch(`http://localhost:5000/seasons?${params}`)\n      .then(resp => resp.json())\n      .then(data => {\n\n        console.log('response data', data);\n\n        console.log(data)\n\n        return\n\n        const nextHoliday = data.holidays.find((holiday: any) => {\n          // @ts-ignore\n          const hDate = new Date(holiday.date.iso);\n          console.log(hDate, new Date(tf));\n          console.log(hDate.valueOf(), tf);\n          return hDate.valueOf() >= tf;\n        });\n\n        const isNorthern = hemisphere !== 'southern';\n        let season = isNorthern ? 'Winter' : 'Summer';\n        if (nextHoliday.urlid === 'seasons/vernal-equinox') {\n          season = isNorthern ? 'Winter' : 'Summer';\n        }\n        if (nextHoliday.urlid === 'seasons/june-solstice') {\n          season = isNorthern ? 'Spring' : 'Fall';\n        }\n        if (nextHoliday.urlid === 'seasons/autumnal-equniox') {\n          season = isNorthern ? 'Summer' : 'Winter';\n        }\n        if (nextHoliday.urlid === 'seasons/december-solstice') {\n          season = isNorthern ? 'Fall' : 'Spring';\n        }\n\n        setSeason(season)\n      });\n  }, [tf, hemisphere]);\n\n  const seasonToBG = {\n    'Spring': 'url(\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.fxNs3XpnmNlF1vd3ktw-EgHaEo%26pid%3DApi&f=1\")',\n    'Summer': 'url(\"https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fgetwallpapers.com%2Fwallpaper%2Ffull%2F1%2Ff%2F0%2F927447-free-download-summer-theme-wallpaper-1920x1200.jpg&f=1&nofb=1\")',\n    'Fall': 'url(\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi0.wp.com%2Fgetwallpapers.com%2Fwallpaper%2Ffull%2Fd%2F8%2Ff%2F1172599-early-fall-desktop-wallpapers-1920x1200-notebook.jpg&f=1&nofb=1\")',\n    'Winter': 'url(\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Feskipaper.com%2Fimages%2Fwinter-backgrounds-11.jpg&f=1&nofb=1\")',\n    'loading…': 'url(\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.fxNs3XpnmNlF1vd3ktw-EgHaEo%26pid%3DApi&f=1\")',\n  }\n\n  const flexCenter = {\n    'display': 'flex',\n    'alignItems': 'center',\n    'justifyContent': 'center',\n    'backgroundSize': 'cover'\n  };\n  return (\n    <section style={\n      { width: '100%', height: '100%', 'backgroundImage': seasonToBG[season], ...flexCenter}\n    }>\n      <h1>{season}</h1>\n    </section>\n  );\n}\n\nexport default function render() {\n  ReactDOM.render(\n    <React.StrictMode>{<Widget />}</React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n}\n","/datadog-app/src/controller/modal.ts",[],"/datadog-app/src/controller/dashboard-cog-menu.ts",[],"/datadog-app/src/controller/widget-ctx-menu.ts",[],{"ruleId":"50","severity":1,"message":"51","line":10,"column":7,"nodeType":"52","messageId":"53","endLine":10,"endColumn":16},{"ruleId":"50","severity":1,"message":"54","line":33,"column":10,"nodeType":"52","messageId":"53","endLine":33,"endColumn":29},{"ruleId":"50","severity":1,"message":"55","line":33,"column":31,"nodeType":"52","messageId":"53","endLine":33,"endColumn":53},{"ruleId":"50","severity":1,"message":"56","line":71,"column":28,"nodeType":"52","messageId":"53","endLine":71,"endColumn":31},{"ruleId":"57","severity":1,"message":"58","line":76,"column":6,"nodeType":"59","endLine":76,"endColumn":29,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":76,"column":7,"nodeType":"62","endLine":76,"endColumn":22},{"ruleId":"50","severity":1,"message":"54","line":17,"column":10,"nodeType":"52","messageId":"53","endLine":17,"endColumn":29},{"ruleId":"50","severity":1,"message":"55","line":17,"column":31,"nodeType":"52","messageId":"53","endLine":17,"endColumn":53},{"ruleId":"63","severity":1,"message":"64","line":63,"column":9,"nodeType":"65","messageId":"66","endLine":69,"endColumn":12},{"ruleId":"63","severity":1,"message":"64","line":71,"column":9,"nodeType":"65","messageId":"66","endLine":86,"endColumn":26},"@typescript-eslint/no-unused-vars","'locations' is assigned a value but never used.","Identifier","unusedVar","'broadcastClickCount' is assigned a value but never used.","'setBroadcastClickCount' is assigned a value but never used.","'sec' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'tf'. Either include it or remove the dependency array.","ArrayExpression",["67"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode",{"desc":"68","fix":"69"},"Update the dependencies array to be: [city, tf]",{"range":"70","text":"71"},[2163,2186],"[city, tf]"]